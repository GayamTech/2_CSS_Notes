<!DOCTYPE html>
<html>
<head>
<style>
div {
  border: 3px solid #4CAF50;
  padding: 5px;
}

.img1 {
  float: right;
}

.img2 {
  float: right;
}

.clearfix::after {
  content: "";
  clear: both;
  display: table;
}
</style>
</head>
<body>

<h2>Without Clearfix</h2>

<p>This image is floated to the right. It is also taller than the element containing it, so it overflows outside of its container:</p>

<div>
  <img class="img1" src="pineapple.jpg" alt="Pineapple" width="170" height="170">
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet...
</div>

<h2 style="clear:right">With New Modern Clearfix</h2>
<p>Add the clearfix hack to the containing element, to fix this problem:</p>

<div class="clearfix">
  <img class="img2" src="pineapple.jpg" alt="Pineapple" width="170" height="170">
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet...
</div>

</body>
</html>







<!-- -->
<!-- -->
<!-- -->
<!--

The overflow: auto clearfix works well as long as you are able to keep control of your margins and padding (else you might see scrollbars). The new, modern clearfix hack however, is safer to use, and the following code is used for most webpages:

 --> 
<!-- -->
<!-- -->
<!-- 

Property			Description

box-sizing		Defines how the width and height of an element are 
			calculated: should they include padding and borders, or not

clear			Specifies what should happen with the element that is next to 
			a floating element

float			Specifies whether an element should float to the left, right, 
			or not at all
overflow			Specifies what happens if content overflows an element's box

overflow-x		Specifies what to do with the left/right edges of the content 
			if it overflows the element's content area

overflow-y		Specifies what to do with the top/bottom edges of the content 
			if it overflows the element's content area

-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- --> 